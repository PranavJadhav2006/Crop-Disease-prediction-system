if st.session_state.selected_page == "Home":     st.markdown("<h1 class='main-title'>ðŸŒ± Crop Disease Prediction System</h1>", unsafe_allow_html=True)     st.write("Upload an image of a plant leaf to get an instant disease prediction. AI-powered insights to help farmers protect crops!")     test_image = st.file_uploader("Upload a leaf image for analysis", type=["jpg", "png", "jpeg"])     if st.button("Show Image"):         st.image(test_image,width = 500)      if st.button("Predict", key="predict_button"):         st.session_state.prediction_made = True         st.balloons()         st.write("Our Prediction")         def model_prediction(image):              model = tf.keras.models.load_model('trained_model.keras')               image = tf.keras.preprocessing.image.load_img(test_image,target_size = (128,128))              input_arr = tf.keras.preprocessing.image.img_to_array(image)              input_arr = np.array([input_arr])              prediction = model.predict(input_arr)              result_index = np.argmax(prediction)              return result_index                  result_index = model_prediction(test_image)                      # Define Class         class_name = ['Apple___Apple_scab',                      'Apple___Black_rot',                      'Apple___Cedar_apple_rust',                      'Apple___healthy',                      'Blueberry___healthy',                      'Cherry_(including_sour)___Powdery_mildew',                      'Cherry_(including_sour)___healthy',                      'Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot',                      'Corn_(maize)___Common_rust_',                      'Corn_(maize)___Northern_Leaf_Blight',                      'Corn_(maize)___healthy',                      'Grape___Black_rot',                      'Grape___Esca_(Black_Measles)',                      'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)',                      'Grape___healthy',                      'Orange___Haunglongbing_(Citrus_greening)',                      'Peach___Bacterial_spot',                      'Peach___healthy',                      'Pepper,_bell___Bacterial_spot',                      'Pepper,_bell___healthy',                      'Potato___Early_blight',                      'Potato___Late_blight',                      'Potato___healthy',                      'Raspberry___healthy',                      'Soybean___healthy',                      'Squash___Powdery_mildew',                      'Strawberry___Leaf_scorch',                      'Strawberry___healthy',                      'Tomato___Bacterial_spot',                      'Tomato___Early_blight',                      'Tomato___Late_blight',                      'Tomato___Leaf_Mold',                      'Tomato___Septoria_leaf_spot',                      'Tomato___Spider_mites Two-spotted_spider_mite',                      'Tomato___Target_Spot',                      'Tomato___Tomato_Yellow_Leaf_Curl_Virus',                      'Tomato___Tomato_mosaic_virus',                      'Tomato___healthy']         Disease = class_name[result_index]         st.success("Model is Predicting it's a {}".format(Disease))         st.session_state.prediction_made = True         st.session_state.predicted_disease = Disease      if st.session_state.prediction_made and st.session_state.predicted_disease:         collection = get_mongo_connection()          def get_preventions(disease):             record = collection.find_one({"disease": disease})             return record["prevention"] if record and "prevention" in record else "No specific prevention information available."          def get_remedies(disease):             record = collection.find_one({"disease": disease})             return record["remedies"] if record and "remedies" in record else "No specific remedy information available."          if st.button("View Preventions", key='Dis_Preventions'):             preventions = get_preventions(st.session_state.predicted_disease)             st.info(f"**Preventions for {st.session_state.predicted_disease}:**\n\n" + "\n".join(preventions))          if st.button("View Remedies", key='Remedies'):             remedies = get_remedies(st.session_state.predicted_disease)             st.info(f"**Remedies for {st.session_state.predicted_disease}:**\n\n" + "\n".join(remedies))             in this code if user upload an invalid image them there should display an error how can i do it ?